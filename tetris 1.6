import pygame
import random

# Initialize Pygame
pygame.init()

# Screen dimensions
SCREEN_WIDTH = 300
SCREEN_HEIGHT = 600
BLOCK_SIZE = 30

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
CYAN = (0, 255, 255)
YELLOW = (255, 255, 0)
MAGENTA = (255, 0, 255)
ORANGE = (255, 165, 0)

# Define the shapes of the single parts
SHAPES = [
    [[1, 1, 1, 1]],
    [[1, 1], [1, 1]],
    [[1, 1, 1], [0, 1, 0]],
    [[1, 1, 0], [0, 1, 1]],
    [[0, 1, 1], [1, 1, 0]],
    [[1, 0, 0], [1, 1, 1]],
    [[0, 0, 1], [1, 1, 1]],
]

# Assign a color to each shape
SHAPES_COLORS = [CYAN, YELLOW, MAGENTA, GREEN, RED, BLUE, ORANGE]

class Tetris:
    def __init__(self, height, width):
        self.height = height
        self.width = width
        self.board = [[0] * width for _ in range(height)]
        self.score = 0
        self.game_over = False
        self.new_shape()

    def new_shape(self):
        self.shape = random.choice(SHAPES)
        self.shape_color = SHAPES_COLORS[SHAPES.index(self.shape)]
        self.shape_x = self.width // 2 - len(self.shape[0]) // 2
        self.shape_y = 0

    def rotate_shape(self):
        self.shape = [list(row) for row in zip(*self.shape[::-1])]
        if not self.can_move(0, 0):
            self.shape = [list(row) for row in zip(*self.shape[::-1])]
            self.shape = [list(row) for row in zip(*self.shape[::-1])]
            self.shape = [list(row) for row in zip(*self.shape[::-1])]

    def can_move(self, dx, dy):
        for y, row in enumerate(self.shape):
            for x, cell in enumerate(row):
                if cell:
                    new_x = self.shape_x + x + dx
                    new_y = self.shape_y + y + dy
                    if new_x < 0 or new_x >= self.width or new_y >= self.height:
                        return False
                    if new_y >= 0 and self.board[new_y][new_x]:
                        return False
        return True

    def freeze_shape(self):
        for y, row in enumerate(self.shape):
            for x, cell in enumerate(row):
                if cell:
                    self.board[self.shape_y + y][self.shape_x + x] = self.shape_color
        self.clear_lines()
        self.new_shape()
        if not self.can_move(0, 0):
            self.game_over = True

    def clear_lines(self):
        new_board = [row for row in self.board if any(cell == 0 for cell in row)]
        lines_cleared = self.height - len(new_board)
        self.score += lines_cleared ** 2
        self.board = [[0] * self.width for _ in range(lines_cleared)] + new_board

    def move_shape(self, dx, dy):
        if self.can_move(dx, dy):
            self.shape_x += dx
            self.shape_y += dy
        elif dy:
            self.freeze_shape()

    def draw(self, screen):
        for y, row in enumerate(self.board):
            for x, cell in enumerate(row):
                if cell:
                    pygame.draw.rect(screen, cell, (x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE))
        for y, row in enumerate(self.shape):
            for x, cell in enumerate(row):
                if cell:
                    pygame.draw.rect(screen, self.shape_color, ((self.shape_x + x) * BLOCK_SIZE, (self.shape_y + y) * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE))

        # Draw the score
        font = pygame.font.SysFont('comicsans', 30)
        score_text = font.render(f'Score: {self.score}', True, WHITE)
        screen.blit(score_text, (10, 10))

def start_screen(screen):
    font = pygame.font.SysFont('comicsans', 60)
    title = font.render('Tetris', True, WHITE)
    font_small = pygame.font.SysFont('comicsans', 30)
    instruction = font_small.render('Press any key to start', True, WHITE)

    screen.fill(BLACK)
    screen.blit(title, (SCREEN_WIDTH // 2 - title.get_width() // 2, SCREEN_HEIGHT // 2 - title.get_height() // 2 - 30))
    screen.blit(instruction, (SCREEN_WIDTH // 2 - instruction.get_width() // 2, SCREEN_HEIGHT // 2 - instruction.get_height() // 2 + 30))
    pygame.display.flip()

    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()
            elif event.type == pygame.KEYDOWN:
                waiting = False

def game_over_screen(screen, score):
    font = pygame.font.SysFont('comicsans', 60)
    game_over_text = font.render('Game Over', True, WHITE)
    score_text = font.render(f'Score: {score}', True, WHITE)
    font_small = pygame.font.SysFont('comicsans', 30)
    retry_text = font_small.render('Press R to retry or Q to quit', True, WHITE)

    screen.fill(BLACK)
    screen.blit(game_over_text, (SCREEN_WIDTH // 2 - game_over_text.get_width() // 2, SCREEN_HEIGHT // 2 - game_over_text.get_height() // 2 - 30))
    screen.blit(score_text, (SCREEN_WIDTH // 2 - score_text.get_width() // 2, SCREEN_HEIGHT // 2 - score_text.get_height() // 2 + 30))
    screen.blit(retry_text, (SCREEN_WIDTH // 2 - retry_text.get_width() // 2, SCREEN_HEIGHT // 2 - retry_text.get_height() // 2 + 90))
    pygame.display.flip()

    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_r:
                    waiting = False
                    return True
                elif event.key == pygame.K_q:
                    pygame.quit()
                    exit()
        clock.tick(10)
    return False

def main():
    global clock
    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
    pygame.display.set_caption("Tetris")
    clock = pygame.time.Clock()

    start_screen(screen)

    while True:
        game = Tetris(SCREEN_HEIGHT // BLOCK_SIZE, SCREEN_WIDTH // BLOCK_SIZE)

        while not game.game_over:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    return
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_LEFT:
                        game.move_shape(-1, 0)
                    elif event.key == pygame.K_RIGHT:
                        game.move_shape(1, 0)
                    elif event.key == pygame.K_DOWN:
                        game.move_shape(0, 1)
                    elif event.key == pygame.K_UP:
                        game.rotate_shape()

            screen.fill(BLACK)
            game.draw(screen)
            pygame.display.flip()

            game.move_shape(0, 1)
            clock.tick(10)

        # Display game over screen and check for retry
        if not game_over_screen(screen, game.score):
            break

if __name__ == "__main__":
    main()
